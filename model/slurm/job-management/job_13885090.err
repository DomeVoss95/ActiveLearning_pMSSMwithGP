Loading gpytorch/gpu-cuda-11.6/pytorch-1.11.0/1.8.0
  Loading requirement: cudnn/8.4.1 pytorch/gpu-cuda-11.6/1.11.0
ERROR: Could not find a version that satisfies the requirement scipy.stats (from versions: none)
ERROR: No matching distribution found for scipy.stats
ERROR: Could not find a version that satisfies the requirement scipy.interpolate (from versions: none)
ERROR: No matching distribution found for scipy.interpolate
/mpcdf/soft/SLE_15/packages/skylake/pytorch/gpu-cuda-11.6/anaconda_3_2021.11-2021.11/1.11.0/lib/python3.9/site-packages/torch/functional.py:568: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  /home/abuild/rpmbuild/BUILD/pytorch-1.11.0/aten/src/ATen/native/TensorShape.cpp:2227.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
/mpcdf/soft/SLE_15/packages/skylake/gpytorch/gpu-cuda-11.6/pytorch-1.11.0/anaconda_3_2021.11-2021.11/1.8.0/lib/python3.9/site-packages/gpytorch/lazy/triangular_lazy_tensor.py:136: UserWarning: torch.triangular_solve is deprecated in favor of torch.linalg.solve_triangularand will be removed in a future PyTorch release.
torch.linalg.solve_triangular has its arguments reversed and does not return a copy of one of the inputs.
X = torch.triangular_solve(B, A).solution
should be replaced with
X = torch.linalg.solve_triangular(A, B). (Triggered internally at  /home/abuild/rpmbuild/BUILD/pytorch-1.11.0/aten/src/ATen/native/BatchLinearAlgebra.cpp:1666.)
  res = torch.triangular_solve(right_tensor, self.evaluate(), upper=self.upper).solution
/raven/u/dvoss/al_pmssmwithgp/model/metrics.py:50: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  torch.tensor(M_1_filtered, dtype=torch.float32),
/raven/u/dvoss/al_pmssmwithgp/model/metrics.py:51: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  torch.tensor(M_2_filtered, dtype=torch.float32)
/raven/u/dvoss/al_pmssmwithgp/model/plots.py:214: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  torch.tensor(M_1_filtered, dtype=torch.float32),
/raven/u/dvoss/al_pmssmwithgp/model/plots.py:215: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  torch.tensor(M_2_filtered, dtype=torch.float32)
/raven/u/dvoss/al_pmssmwithgp/model/plots.py:238: RuntimeWarning: invalid value encountered in true_divide
  heatmap = heatmap/heatmap_counts
/raven/u/dvoss/al_pmssmwithgp/model/plots.py:287: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  torch.tensor(M_1_filtered, dtype=torch.float32),
/raven/u/dvoss/al_pmssmwithgp/model/plots.py:288: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  torch.tensor(M_2_filtered, dtype=torch.float32)
/raven/u/dvoss/al_pmssmwithgp/model/plots.py:311: RuntimeWarning: invalid value encountered in true_divide
  heatmap = heatmap/heatmap_counts
/raven/u/dvoss/al_pmssmwithgp/model/plots.py:387: RuntimeWarning: invalid value encountered in true_divide
  heatmap = heatmap/heatmap_counts
Traceback (most recent call last):
  File "/u/dvoss/al_pmssmwithgp/model/main.py", line 196, in <module>
    gp_pipeline.run_for_iterations(start_iter, end_iter)
  File "/u/dvoss/al_pmssmwithgp/model/main.py", line 109, in run_for_iterations
    self.model.train_model(iters=1000) # TODO: adjust to raven again
  File "/raven/u/dvoss/al_pmssmwithgp/model/models.py", line 32, in train_model
    self.best_model, self.losses, self.losses_valid = self.model.do_train_loop(iters=iters)
  File "/raven/u/dvoss/al_pmssmwithgp/model/multitaskGP2D.py", line 108, in do_train_loop
    observed_pred_valid = self.likelihood(self(self.x_valid))
  File "/mpcdf/soft/SLE_15/packages/skylake/gpytorch/gpu-cuda-11.6/pytorch-1.11.0/anaconda_3_2021.11-2021.11/1.8.0/lib/python3.9/site-packages/gpytorch/models/exact_gp.py", line 302, in __call__
    full_inputs.append(torch.cat([train_input, input], dim=-2))
RuntimeError: Sizes of tensors must match except in dimension 0. Expected size 2 but got size 1 for tensor number 1 in the list.
srun: error: ravg1095: task 0: Exited with exit code 1
srun: Terminating StepId=13885090.0
